/*
SPDX-License-Identifier: Apache-2.0

Copyright Contributors to the Submariner project.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// ClusterSpecApplyConfiguration represents an declarative configuration of the ClusterSpec type for use
// with apply.
type ClusterSpecApplyConfiguration struct {
	ClusterID   *string  `json:"cluster_id,omitempty"`
	ColorCodes  []string `json:"color_codes,omitempty"`
	ServiceCIDR []string `json:"service_cidr,omitempty"`
	ClusterCIDR []string `json:"cluster_cidr,omitempty"`
	GlobalCIDR  []string `json:"global_cidr,omitempty"`
}

// ClusterSpecApplyConfiguration constructs an declarative configuration of the ClusterSpec type for use with
// apply.
func ClusterSpec() *ClusterSpecApplyConfiguration {
	return &ClusterSpecApplyConfiguration{}
}

// WithClusterID sets the ClusterID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClusterID field is set to the value of the last call.
func (b *ClusterSpecApplyConfiguration) WithClusterID(value string) *ClusterSpecApplyConfiguration {
	b.ClusterID = &value
	return b
}

// WithColorCodes adds the given value to the ColorCodes field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ColorCodes field.
func (b *ClusterSpecApplyConfiguration) WithColorCodes(values ...string) *ClusterSpecApplyConfiguration {
	for i := range values {
		b.ColorCodes = append(b.ColorCodes, values[i])
	}
	return b
}

// WithServiceCIDR adds the given value to the ServiceCIDR field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ServiceCIDR field.
func (b *ClusterSpecApplyConfiguration) WithServiceCIDR(values ...string) *ClusterSpecApplyConfiguration {
	for i := range values {
		b.ServiceCIDR = append(b.ServiceCIDR, values[i])
	}
	return b
}

// WithClusterCIDR adds the given value to the ClusterCIDR field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ClusterCIDR field.
func (b *ClusterSpecApplyConfiguration) WithClusterCIDR(values ...string) *ClusterSpecApplyConfiguration {
	for i := range values {
		b.ClusterCIDR = append(b.ClusterCIDR, values[i])
	}
	return b
}

// WithGlobalCIDR adds the given value to the GlobalCIDR field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the GlobalCIDR field.
func (b *ClusterSpecApplyConfiguration) WithGlobalCIDR(values ...string) *ClusterSpecApplyConfiguration {
	for i := range values {
		b.GlobalCIDR = append(b.GlobalCIDR, values[i])
	}
	return b
}
